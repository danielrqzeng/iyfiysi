// gen by iyfiysi at {{ .CreateTime.Format "2006 Jan 02" }}

package {{.PackageName}}

import (
    "flag"
	"github.com/fsnotify/fsnotify"
	"github.com/spf13/viper"
	"net/http"
    "strings"
	"fmt"
	"os"
    "github.com/grpc-ecosystem/grpc-gateway/runtime"

    "{{.Domain}}/{{.AppName}}/internal/pkg/logger"
    "{{.Domain}}/{{.AppName}}/internal/pkg/interceptor"
    "{{.Domain}}/{{.AppName}}/internal/pkg/utils"
    "{{.Domain}}/{{.AppName}}/internal/app/gateway/discovery"
)


//定义一个全局变量的命令行接收参数
var (
	confFlag     = flag.String("conf", "./conf/app.yaml", "configuration file")
	versionFlag  = flag.Bool("version", false, "print the current version")
)

// Variables set at build time
var (
	version = "v1.0.0"
	commit  = "unknown"
	date    = "unknown"
)


func initConfig() {
	//**********default conf/app.yaml**********
	confFile := *confFlag
	if !strings.HasSuffix(confFile, ".yaml") {
		panic(fmt.Errorf("config file=%s is not yaml type,pls use the right type", confFile))
	}

	viper.SetConfigFile(confFile)
	err := viper.ReadInConfig()
	if err != nil {
		panic(fmt.Errorf("Fatal error config file: %s \n", err))
	}

	//配置变化
	viper.WatchConfig() //监听配置变化
	viper.OnConfigChange(func(e fsnotify.Event) {
		logger.MainLogger.Error("config=" + e.Name + " change")
	})
}


func initAll() {
	initConfig()
	//做各个部件的初始化
	logger.Init()
	utils.Init()
}

func main() {
	flag.Parse()

	if *versionFlag {
		fmt.Printf("Version %v, commit %v, built at %v\n", version, commit, date)
		os.Exit(0)
	}

	initAll()

	etcdServers := viper.GetStringSlice("etcd.etcdServer")
	instance := viper.GetString("gateway.listen")
	jaegerServers := viper.GetStringSlice("jaeger.jaegerServer")

	grpcMux := runtime.NewServeMux()
	discovery.Discovery(grpcMux,etcdServers,jaegerServers[0])
	httpMux := http.NewServeMux()
	mux :=&interceptor.HttpInterceptor{grpcMux}
	httpMux.Handle("/", mux)

	// Start HTTP server (and proxy calls to gRPC server endpoint)
	http.ListenAndServe(instance, httpMux)
	return
}