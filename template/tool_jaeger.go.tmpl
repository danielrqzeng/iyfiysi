// gen by iyfiysi at {{.CreateTime}}
package tool

import (
	"encoding/base64"
	"fmt"
	"github.com/grpc-ecosystem/go-grpc-middleware/util/metautils"
	"github.com/opentracing/opentracing-go/ext"
	"github.com/opentracing/opentracing-go/log"
	"github.com/uber/jaeger-client-go"
	jaegerCfg "github.com/uber/jaeger-client-go/config"
	"github.com/uber/jaeger-lib/metrics"
	"github.com/opentracing/opentracing-go"
	"google.golang.org/grpc"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"io"
	"strings"
	"context"
)

func InitTracer(jeagerReporterUrl, serviceName string) (err error) {
	cfg := jaegerCfg.Configuration{
		//采样率
		Sampler: &jaegerCfg.SamplerConfig{
			Type:  "const",
			Param: 1,
		},
		//报告方式
		Reporter: &jaegerCfg.ReporterConfig{
			LogSpans: true,
			//LocalAgentHostPort: "locahost:9411",
			LocalAgentHostPort: jeagerReporterUrl,
			//CollectorEndpoint: "http://localhost:14268/api/traces",
		},
	}

	cfg.ServiceName = serviceName

	tracer, closer, err := cfg.NewTracer(
		jaegerCfg.Logger(jaeger.StdLogger),
		jaegerCfg.Metrics(metrics.NullFactory),
	)
	_ = closer
	if err != nil {
		fmt.Println("tracer error ", err, ",jeagerReporterUrl=", jeagerReporterUrl)
		return
	}
	opentracing.SetGlobalTracer(tracer)
	fmt.Println("jeagerReporterUrl=" + jeagerReporterUrl)
	return
}

const (
	binHdrSuffix = "-bin"
)

// metadataTextMap extends a metadata.MD to be an opentracing textmap
type metadataTextMap metadata.MD

// Set is a opentracing.TextMapReader interface that extracts values.
func (m metadataTextMap) Set(key, val string) {
	// gRPC allows for complex binary values to be written.
	encodedKey, encodedVal := encodeKeyValue(key, val)
	// The metadata object is a multimap, and previous values may exist, but for opentracing headers, we do not append
	// we just override.
	m[encodedKey] = []string{encodedVal}
}

// ForeachKey is a opentracing.TextMapReader interface that extracts values.
func (m metadataTextMap) ForeachKey(callback func(key, val string) error) error {
	for k, vv := range m {
		for _, v := range vv {
			if err := callback(k, v); err != nil {
				return err
			}
		}
	}
	return nil
}

// encodeKeyValue encodes key and value qualified for transmission via gRPC.
// note: copy pasted from private values of grpc.metadata
func encodeKeyValue(k, v string) (string, string) {
	k = strings.ToLower(k)
	if strings.HasSuffix(k, binHdrSuffix) {
		val := base64.StdEncoding.EncodeToString([]byte(v))
		v = string(val)
	}
	return k, v
}

//http访问的span
func NewHttpAccessSpan(ctx context.Context, tracer opentracing.Tracer, spanName string) (span opentracing.Span) {
	//获取父span
	var parentSpanCtx opentracing.SpanContext
	if parent := opentracing.SpanFromContext(ctx); parent != nil {
		parentSpanCtx = parent.Context()
	}

	//tag
	//component
	componentTag := opentracing.Tag{Key: string(ext.Component), Value: "http"}
	//调用角色
	callerTag := ext.SpanKindRPCServer
	//http方法
	//httpMethodTag := opentracing.Tag{Key: string(ext.HTTPMethod), Value: ctx.Value("method")}
	//httpurl
	host := ""
	if md, ok := metadata.FromOutgoingContext(ctx); ok {
		valHost := md.Get("X-Forwarded-Host")
		if len(valHost) == 1 {
			host = valHost[0]
		}
	}
	httpUrlTag := opentracing.Tag{Key: string(ext.HTTPUrl), Value: host + spanName}

	opts := []opentracing.StartSpanOption{
		opentracing.ChildOf(parentSpanCtx),
		callerTag,
		componentTag,
		httpUrlTag,
	}
	if tagx := ctx.Value(clientSpanTagKey{}); tagx != nil {
		if opt, ok := tagx.(opentracing.StartSpanOption); ok {
			opts = append(opts, opt)
		}
	}
	span = tracer.StartSpan(spanName, opts...)
	return
}
//rpc client的span
func NewRpcClientSpan(ctx context.Context, tracer opentracing.Tracer, spanName string) (span opentracing.Span) {
	//获取父span
	var parentSpanCtx opentracing.SpanContext
	if parent := opentracing.SpanFromContext(ctx); parent != nil {
		parentSpanCtx = parent.Context()
	}

	//tag
	//component
	componentTag := opentracing.Tag{Key: string(ext.Component), Value: "gRPC"}
	//调用角色
	callerTag := ext.SpanKindRPCClient

	opts := []opentracing.StartSpanOption{
		opentracing.ChildOf(parentSpanCtx),
		callerTag,
		componentTag,
	}

	if tagx := ctx.Value(clientSpanTagKey{}); tagx != nil {
		if opt, ok := tagx.(opentracing.StartSpanOption); ok {
			opts = append(opts, opt)
		}
	}
	span = tracer.StartSpan(spanName, opts...)
	return
}

type clientSpanTagKey struct{}

func GatewayTracerClientInterceptor(tracer opentracing.Tracer) grpc.UnaryClientInterceptor {
	return func(
		ctx context.Context,
		method string,
		req, rsp interface{},
		cc *grpc.ClientConn,
		invoker grpc.UnaryInvoker,
		opts ...grpc.CallOption,
	) error {
		fmt.Println(":69 GatewayTracerClientInterceptor")
		httpSpan := NewHttpAccessSpan(ctx, tracer, cc.Target())
		defer httpSpan.Finish()
		ctx = opentracing.ContextWithSpan(ctx, httpSpan)

		rpcClientSpan := NewRpcClientSpan(ctx, tracer, method)

		// Make sure we add this to the metadata of the call, so it gets propagated:
		md := metautils.ExtractOutgoing(ctx).Clone()
		if err := tracer.Inject(rpcClientSpan.Context(), opentracing.HTTPHeaders, metadataTextMap(md)); err != nil {
			grpclog.Infof("grpc_opentracing: failed serializing trace information: %v", err)
		}
		ctxWithMetadata := md.ToOutgoing(ctx)

		newCtx := opentracing.ContextWithSpan(ctxWithMetadata, rpcClientSpan)
		err := invoker(newCtx, method, req, rsp, cc, opts...)
		if err != nil && err != io.EOF {
			ext.Error.Set(rpcClientSpan, true)
			rpcClientSpan.LogFields(log.String("event", "error"), log.String("message", err.Error()))
		}
		defer rpcClientSpan.Finish()

		return err
	}
}