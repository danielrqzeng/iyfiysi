// gen by iyfiysi at {{ .CreateTime.Format "2006 Jan 02" }}


package {{.PackageName}}

import (
	"time"
	"context"

	"github.com/coreos/etcd/clientv3"
	etcdNaming "github.com/coreos/etcd/clientv3/naming"
	"github.com/grpc-ecosystem/go-grpc-middleware"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"github.com/spf13/viper"
	"google.golang.org/grpc"

	"{{.Domain}}/{{.AppName}}/internal/pkg/interceptor"
	"{{.Domain}}/{{.AppName}}/internal/pkg/trace"
	"{{.Domain}}/{{.AppName}}/internal/pkg/utils"
)

func Discovery(gwmux *runtime.ServeMux, etcdAddrs []string, jaegerAddrs string) (err error) {
    ctx := context.Background()
    ctx, cancel := context.WithCancel(ctx)
    _ = cancel
    //defer cancel()

    //全局最终实例初始化
    trace.InitTracer(jaegerAddrs, "{{.AppName}}")

    
    //----------etcd的服务发现option-------------------
    cli, err := clientv3.New(clientv3.Config{
        Endpoints:   etcdAddrs,
        DialTimeout: 5 * time.Second,
    })
    if err != nil {
        panic(err)
    }
    //defer cli.Close()
    r := &etcdNaming.GRPCResolver{Client: cli}
    lbOption := grpc.WithBalancer(grpc.RoundRobin(r))

    //--------------ssl证书option----------------------
    serverName := viper.GetString("keystore.serverName")
    caFile := viper.GetString("keystore.ca")
    privateFile  := viper.GetString("keystore.private")
    publicFile := viper.GetString("keystore.public")
    _,clientCred,err:=utils.GenCredentials(caFile,publicFile,privateFile,serverName)
    if err != nil{
        panic(err)
    }
    sslOption := grpc.WithTransportCredentials(clientCred)
    tokenOption := grpc.WithPerRPCCredentials(interceptor.BearerRPCCredentials())

    //--------------拦截器option----------------------
	interceptors := interceptor.GetGatewayInterceptors()
	interceptorOption := grpc.WithUnaryInterceptor(grpc_middleware.ChainUnaryClient(interceptors))


    //所有选项
    var opts []grpc.DialOption
    opts = append(opts, lbOption)
    opts = append(opts, sslOption)
    opts = append(opts, tokenOption)
    opts = append(opts,interceptorOption)

    err = DoDiscovery(ctx, gwmux,  opts)
    if err != nil {
        return
    }
    return
}