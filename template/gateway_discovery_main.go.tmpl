// gen by iyfiysi at {{ .CreateTime.Format "2006 Jan 02" }}


package {{.PackageName}}

import (
    "context"
    //"crypto/tls"
    "github.com/grpc-ecosystem/go-grpc-prometheus"
    "github.com/grpc-ecosystem/grpc-gateway/runtime"
    "github.com/opentracing/opentracing-go"
    "github.com/spf13/viper"
    "github.com/coreos/etcd/clientv3"
    etcdnaming "github.com/coreos/etcd/clientv3/naming"
    "google.golang.org/grpc"
    //"google.golang.org/grpc/credentials"
    "github.com/grpc-ecosystem/go-grpc-middleware"
    "time"

    "{{.Domain}}/{{.AppName}}/internal/pkg/jaeger"
    "{{.Domain}}/{{.AppName}}/internal/pkg/utils"
)

func Discovery(gwmux *runtime.ServeMux, etcdAddrs []string, jaegerAddrs string) (err error) {
    ctx := context.Background()
    ctx, cancel := context.WithCancel(ctx)
    _ = cancel
    //defer cancel()

    //全局最终实例初始化
    jaeger.InitTracer(jaegerAddrs, "{{.AppName}}")

    
    //----------etcd的服务发现option-------------------
    cli, err := clientv3.New(clientv3.Config{
        Endpoints:   etcdAddrs,
        DialTimeout: 5 * time.Second,
    })
    if err != nil {
        panic(err)
    }
    //defer cli.Close()
    r := &etcdnaming.GRPCResolver{Client: cli}
    lbOption := grpc.WithBalancer(grpc.RoundRobin(r))

    //--------------ssl证书option----------------------
    serverName := viper.GetString("keystore.serverName")
    caFile := viper.GetString("keystore.ca")
    privateFile  := viper.GetString("keystore.private")
    publicFile := viper.GetString("keystore.public")
    _,clientCred,err:=utils.GenCredentials(caFile,publicFile,privateFile,serverName)
    if err != nil{
        panic(err)
    }
    sslOption := grpc.WithTransportCredentials(clientCred)

/*
	publicFile 	:= viper.GetString("keystore.public")
    c, tlsErr := credentials.NewClientTLSFromFile(publicFile, "{{.AppName}}")
    if tlsErr != nil {
        panic(tlsErr)
    }

    opts := []grpc.DialOption{grpc.WithTransportCredentials(c)}
    skipcacheck := grpc.WithTransportCredentials(credentials.NewTLS(&tls.Config{
        // given the grpc-gateway is always connecting to localhost, does
        // InsecureSkipVerify=true cause any security issues?
        InsecureSkipVerify: true,
    }))
    opts = append(opts, skipcacheck) //无ca
    */


    //--------------拦截器option----------------------
    interceptorOption := grpc.WithUnaryInterceptor(grpc_middleware.ChainUnaryClient(
        jaeger.GatewayTracerClientInterceptor(opentracing.GlobalTracer()),
        grpc_prometheus.UnaryClientInterceptor,
    ))


    //所有选项
    var opts []grpc.DialOption
    opts = append(opts, lbOption)
    opts = append(opts, sslOption)
    opts = append(opts,interceptorOption)

    err = DoDiscovery(ctx, gwmux,  opts)
    if err != nil {
        return
    }
    return
}