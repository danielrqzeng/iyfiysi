// gen by iyfiysi at {{ .CreateTime.Format "2006 Jan 02" }}

package {{.PackageName}}

import (
	"context"
	"fmt"
	"github.com/coreos/etcd/clientv3"
	etcdNaming "github.com/coreos/etcd/clientv3/naming"
	"github.com/gorilla/mux"
	grpc_prometheus "github.com/grpc-ecosystem/go-grpc-prometheus"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/spf13/viper"
	"google.golang.org/grpc"
	"google.golang.org/grpc/naming"
	"google.golang.org/grpc/reflection"
	"net/http"
	"strings"
	"{{.Domain}}/{{.AppName}}/internal/app/server/service"
	"{{.Domain}}/{{.AppName}}/internal/pkg/governance"
	"{{.Domain}}/{{.AppName}}/internal/pkg/interceptor"
	"{{.Domain}}/{{.AppName}}/internal/pkg/utils"
)

func GrpcServer() (server *grpc.Server, err error) {
	interceptors := interceptor.GetServerInterceptors()
	server = grpc.NewServer(grpc.UnaryInterceptor(interceptors))

	//注册服务
	err = service.DoRegister(server)
	if err != nil {
		return
	}
	//注册监控
	grpc_prometheus.Register(server)
	grpc_prometheus.EnableHandlingTimeHistogram()

	//注册grpc反射（给grpcurl使用）
	reflection.Register(server)
	return
}

func Run() (err error) {
	instanceIP := governance.GetServiceInstanceAddr()
	instancePort := 0
	minPort := viper.GetInt("server.minPort")
	maxPort := viper.GetInt("server.maxPort")
	for i := minPort; i <= maxPort; i++ {
		if utils.IsPortAvailable(i) {
			instancePort = i
			break
		}
	}
	instance := fmt.Sprintf("%s:%d", instanceIP, instancePort)

	//服务治理之注册
	serviceKey := viper.GetString("etcd.serviceKey")
	cli, err := governance.DefaultEtcdV3Client()
	if err != nil {
		return
	}
	e := &governance.EtcdType{}
	err = e.RunToKeepAlive(cli, serviceKey,
		func(leaseID clientv3.LeaseID) {
			ops := clientv3.WithLease(leaseID)
			r := &etcdNaming.GRPCResolver{Client: cli}
			err = r.Update(context.TODO(), serviceKey,
				naming.Update{Op: naming.Add, Addr: instance, Metadata: "..."},
				ops)
		},
		func(code int, msg string) {
			fmt.Println("serviceKey=", serviceKey, ",code=", code, ",msg=", msg)
		})

	if err != nil {
		return
	}

	server, err := GrpcServer()
	if err != nil {
		return
	}

	httpMux := mux.NewRouter()
	httpMux.Handle("/metrics", promhttp.HandlerFor(
		prometheus.DefaultGatherer,
		promhttp.HandlerOpts{
		},
	))

	keystorePublicKey := viper.GetString("keystore.public")
	keystorePrivateKey := viper.GetString("keystore.private")
	err = http.ListenAndServeTLS(instance,
		keystorePublicKey,
		keystorePrivateKey,
		http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			if r.ProtoMajor == 2 &&
				strings.Contains(
					r.Header.Get("Content-Type"), "application/grpc") {
				server.ServeHTTP(w, r)
			} else {
				httpMux.ServeHTTP(w, r)
			}
			return
		}),
	)
	return
}