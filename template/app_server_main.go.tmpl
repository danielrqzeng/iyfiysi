// gen by iyfiysi at {{ .CreateTime.Format "2006 Jan 02" }}

package {{.PackageName}}

import (
	"context"
	"fmt"
	"github.com/coreos/etcd/clientv3"
	etcdNaming "github.com/coreos/etcd/clientv3/naming"
	grpc_prometheus "github.com/grpc-ecosystem/go-grpc-prometheus"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/spf13/viper"
	"google.golang.org/grpc"
	"google.golang.org/grpc/naming"
	"google.golang.org/grpc/reflection"
	"net/http"
	"{{.Domain}}/{{.AppName}}/internal/app/server/service"
	"{{.Domain}}/{{.AppName}}/internal/pkg/governance"
	"{{.Domain}}/{{.AppName}}/internal/pkg/interceptor"
)

//GrpcServer ...
func GrpcServer() (server *grpc.Server, err error) {
	interceptors := interceptor.Mgr().GetServerInterceptors()
	server = grpc.NewServer(grpc.UnaryInterceptor(interceptors))

	//注册服务
	err = service.DoRegister(server)
	if err != nil {
		return
	}
	//注册监控
	grpc_prometheus.Register(server)
	grpc_prometheus.EnableHandlingTimeHistogram()

	//注册grpc反射（给grpcurl使用）
	reflection.Register(server)
	return
}


//runGRPC grpc服务
func runGRPC() (err error) {
	instance, err := governance.GetSetupInstanceAddrByConfKey("server")
	if err != nil {
		return
	}

	//服务治理之注册
	serviceKey := viper.GetString("etcd.serviceKey")
	cli, err := governance.DefaultEtcdV3Client()
	if err != nil {
		return
	}
	e := &governance.EtcdType{}
	err = e.RunToKeepAlive(cli, serviceKey,
		func(leaseID clientv3.LeaseID) {
			ops := clientv3.WithLease(leaseID)
			r := &etcdNaming.GRPCResolver{Client: cli}
			err = r.Update(context.TODO(), serviceKey,
				naming.Update{Op: naming.Add, Addr: instance, Metadata: "..."},
				ops)
		},
		func(code int, msg string) {
			fmt.Println("serviceKey=", serviceKey, ",code=", code, ",msg=", msg)
		})

	if err != nil {
		return
	}

	server, err := GrpcServer()
	if err != nil {
		return
	}

	keystorePublicKey := viper.GetString("keystore.public")
	keystorePrivateKey := viper.GetString("keystore.private")
	err = http.ListenAndServeTLS(instance,
		keystorePublicKey,
		keystorePrivateKey,
		server,
		//http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		//	if r.ProtoMajor == 2 &&
		//		strings.Contains(
		//			r.Header.Get("Content-Type"), "application/grpc") {
		//		server.ServeHTTP(w, r)
		//	}
		//	return
		//}),
	)
	return
}

//runMetricsHTTP metric服务
func runMetricsHTTP() {
	if !viper.GetBool("metrics.enable") {
		return
	}

	instance, err := governance.GetSetupInstanceAddrByConfKey("metrics.server")
	if err != nil {
		panic(err)
	}
	metricsPath := viper.GetString("metrics.server.path")
	httpMux := http.NewServeMux()
	httpMux.Handle(metricsPath, promhttp.HandlerFor(
		prometheus.DefaultGatherer,
		promhttp.HandlerOpts{},
	))

	// Start HTTP server (and proxy calls to gRPC server endpoint)
	err = http.ListenAndServe(instance, httpMux)
	return
}

//Run 启动
func Run() (err error) {
	//metrics
	go runMetricsHTTP()

	//grpc
	err = runGRPC()
	if err != nil {
		return
	}
	return
}
