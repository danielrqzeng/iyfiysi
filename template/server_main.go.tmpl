// gen by iyfiysi at {{.CreateTime}}
package main

import (
	"flag"
	"fmt"
	"go.uber.org/zap/zapcore"
	"os"
	"strings"
	"net/http"
	"github.com/gorilla/mux"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/prometheus/client_golang/prometheus"
	"google.golang.org/grpc/reflection"
	"github.com/fsnotify/fsnotify"
	"github.com/spf13/viper"

	"{{.Domain}}/{{.AppName}}/server/service"
	"{{.Domain}}/{{.AppName}}/util"
    "{{.Domain}}/{{.AppName}}/tool"
)

//定义一个全局变量的命令行接收参数
var (
	confFlag     = flag.String("conf", "./conf/app.yaml", "configuration file")
	versionFlag  = flag.Bool("version", false, "print the current version")
)

// Variables set at build time
var (
	version = "v1.0.0"
	commit  = "unknown"
	date    = "unknown"
)


func initConfig() {
	//**********conf/app.yaml**********
	confFile := *confFlag
	if !strings.HasSuffix(confFile, ".yaml") {
		panic(fmt.Errorf("config file=%s is not yaml type,pls use the right type", confFile))
	}

	viper.SetConfigFile(confFile)
	err := viper.ReadInConfig()
	if err != nil {
		panic(fmt.Errorf("Fatal error config file: %s \n", err))
	}

	//配置变化
	viper.WatchConfig() //监听配置变化
	viper.OnConfigChange(func(e fsnotify.Event) {
		util.MainLogger.Error("config=" + e.Name + " change")
	})
}


func initLoger() {
    type LoggerConfigType struct {
		Name  string
		File  string
		Level string
	}
	var loggers []LoggerConfigType
	err := viper.UnmarshalKey("logger", &loggers)
	if err != nil {
		panic("Unable to unmarshal logger from config")
	}
	desc2level := map[string]zapcore.Level{
		"debug":   zapcore.DebugLevel,
		"info":    zapcore.InfoLevel,
		"warning": zapcore.WarnLevel,
		"error":   zapcore.ErrorLevel,
	}

	for _, logger := range loggers {
		if _, ok := desc2level[logger.Level]; !ok {
			panic("logger config err,unknow logger level=" + logger.Level + " for logger=" + logger.Name)
		}
		util.InitOneLogger(logger.Name, logger.File, desc2level[logger.Level])
	}
}

func initAll() {
	initConfig()
	initLoger()
	//做各个部件的初始化
	util.Init()
    tool.Init()
}

func main() {
	flag.Parse()

	if *versionFlag {
		fmt.Printf("Version %v, commit %v, built at %v\n", version, commit, date)
		os.Exit(0)
	}

	initAll()

	etcdServers := viper.GetStringSlice("etcd.etcdServer")
	instance := viper.GetString("server.listen")
	jaegerServers := viper.GetStringSlice("jaeger.jaegerServer")

	s, err := service.Register(etcdServers, jaegerServers[0], instance)
	if err != nil {
		panic(err)
	}
	reflection.Register(s)
	//s.Serve(lis)

	httpMux := mux.NewRouter()
	//httpMux.Handle("/metrics", promhttp.Handler())
	//httpMux.Handle("/metrics",promhttp.HandlerFor(prometheus.DefaultRegisterer, promhttp.HandlerOpts{}))
	httpMux.Handle("/metrics", promhttp.HandlerFor(
		prometheus.DefaultGatherer,
		//prometheus.DefaultRegisterer,
		promhttp.HandlerOpts{
			// Opt into OpenMetrics to support exemplars.
			//EnableOpenMetrics: true,
		},
	))


	keystorePublicKey 	:= viper.GetString("keystore.public")
	keystorePrivateKey 	:= viper.GetString("keystore.private")
	http.ListenAndServeTLS(instance,
	    keystorePublicKey,
	    keystorePrivateKey,
	    http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		    if r.ProtoMajor == 2 && strings.Contains(r.Header.Get("Content-Type"), "application/grpc") {
		    	s.ServeHTTP(w, r)
		    } else {
		    	httpMux.ServeHTTP(w, r)
		    }
		    return
	    }),
	)
}