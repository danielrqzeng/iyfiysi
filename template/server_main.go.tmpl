// gen by iyfiysi at {{ .CreateTime.Format "2006 Jan 02" }}

package main

import (
	"flag"
	"fmt"
	"github.com/gorilla/mux"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/spf13/viper"
	"google.golang.org/grpc/reflection"
	"net/http"
	"os"
	"strings"

	"{{.Domain}}/{{.AppName}}/internal/app/server/service"
	"{{.Domain}}/{{.AppName}}/internal/pkg/logger"
	"{{.Domain}}/{{.AppName}}/internal/pkg/utils"
	"{{.Domain}}/{{.AppName}}/internal/pkg/conf"
	"{{.Domain}}/{{.AppName}}/internal/pkg/governance"
)

//定义一个全局变量的命令行接收参数
var (
    etcdServerFlag = flag.String("etcd", "http://127.0.0.1:2379", `etcd server,split with "," if more than one etcd server`)
	confKeyFlag    = flag.String("conf_key", "/{{.AppName}}/config/app.yaml", `etcd conf key`)
	confFlag    = flag.String("conf", "./conf/app.yaml", "configuration file")
	versionFlag = flag.Bool("version", false, "print the current version")
)

// Variables set at build time
var (
	version = "v1.0.0"
	commit  = "unknown"
	date    = "unknown"
)

func initAll() {
	conf.Init()
	err := conf.InitRemoteConfig(
		strings.Split(*etcdServerFlag, ","),
		*confKeyFlag,
		func() {
			fmt.Println(viper.GetString("version"))
		})
	if err != nil {
		panic(err)
	}
	//做各个部件的初始化
	logger.Init()
	utils.Init()
}

func main() {
	flag.Parse()

	if *versionFlag {
		fmt.Printf("Version %v, commit %v, built at %v\n", version, commit, date)
		os.Exit(0)
	}
	defer utils.DeferWhenCoreDump()

	initAll()

	etcdServers := viper.GetStringSlice("etcd.etcdServer")
	instanceIP := governance.GetServiceInstanceAddr()
	instancePort := 0
	for i := viper.GetInt("server.minPort"); i < viper.GetInt("server.maxPort"); i++ {
		if utils.IsPortAvailable(i) {
			instancePort = i
			break
		}
	}
	instance := fmt.Sprintf("%s:%d", instanceIP, instancePort)
	jaegerServers := viper.GetStringSlice("jaeger.jaegerServer")

	s, err := service.Register(etcdServers, jaegerServers[0], instance)
	if err != nil {
		panic(err)
	}
	reflection.Register(s)
	//s.Serve(lis)

	httpMux := mux.NewRouter()
	//httpMux.Handle("/metrics", promhttp.Handler())
	//httpMux.Handle("/metrics",promhttp.HandlerFor(prometheus.DefaultRegisterer, promhttp.HandlerOpts{}))
	httpMux.Handle("/metrics", promhttp.HandlerFor(
		prometheus.DefaultGatherer,
		//prometheus.DefaultRegisterer,
		promhttp.HandlerOpts{
			// Opt into OpenMetrics to support exemplars.
			//EnableOpenMetrics: true,
		},
	))

	keystorePublicKey := viper.GetString("keystore.public")
	keystorePrivateKey := viper.GetString("keystore.private")
	http.ListenAndServeTLS(instance,
		keystorePublicKey,
		keystorePrivateKey,
		http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			if r.ProtoMajor == 2 && strings.Contains(r.Header.Get("Content-Type"), "application/grpc") {
				s.ServeHTTP(w, r)
			} else {
				httpMux.ServeHTTP(w, r)
			}
			return
		}),
	)
}
